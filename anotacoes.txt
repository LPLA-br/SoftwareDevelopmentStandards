##############################
#                            #
# VISÃO AMPLA DOS PRINCÍPIOS #
# E OU PADRÕES DE PROJETO    #
#                            #
##############################

A TEORÍA VALE OURO !

CARACTERÍSTICAS DETESTÁVEIS DO CÓDIGO
DO PONTO DE VISTA HUMANO.
  I. DIFICULDADE DE LER/ENTENDER
    void (*(*f[]) ()) ();
    matriz de tamanho indeterminado com ponteiros
    para funções que retornam ponteiros para funções
    que retornam tipo void.
    Código C|javascript|C++|java em uma linha ...
    Quem precisa de comentário para a função
    fnts(int, int ,float, Produto, Negocio): Preco
  II. ACOPLAMENTO
    modifiquei aqui, surgiu 666 erros e avisos
    no log do sistema. Dependências de concreto.
    Não indicam a falta de modulariade, mas sim
    o mau uso desta.
  III. DIFICULDADE DE FAZER MANUTENÇÃO
    As 69666 interações complexas entre funções|classes
    complicaram|impossibilitaram a atualização das regras
    de negócio.
  IV. MÁ GESTÃO DE MEMÓRIA
    HUMM testes demonstraram que a array quase nunca cresce
    acima de 1000 elementos. Vou alocar 1.000.000.000 só
    para garantir.
    free() ? sem nem o que é isso.
  V. DUPLICAÇÃO DE CÓDIGO
      printf("Nome:%s ", nome);
      printf("Idade:%s ", idade);
      printf("Peso:%s ", peso);
    aparece 69.000.000.000 vezes no código
  VI. COMPLEXIDADE ONDE NÃO SE É NECESSÁRIA
    Vou aplicar algoritmo hiperdimensional super hiper mega blaster
    com lógica Girolaniana com paralelismo avançado de divisão
    baseada na teoria da divisão de estados elentares hiperfricionantes
    de oitava geração para ordenar o array que nunca passa de 10 elemementos.

###########

KISS Keep It Simple, Stupid !
Uma filosofia UNIX

###########

FILOSOFIA UNIX 1969 1970s 1980s
Ken Thompson  - Main programator of UNIX
Dennis Richie - Ĉreator of C language
Brian Kernighan - Coauthor AWK, AMPL
Doug McIlroy - Unix pipelines

  I.Faça programas que façam uma coisa e que a façam
  bem feita. Surgindo novos trabalhos, não cresca o
  programa velho em novas funcionalidades.

  II.A saída de um programa pode/deve ser a entrada de outro.
  Não sobrecarregue a saída com informações estranhas.
  Evite formatos estritamente colunares ou binários. Não 
  insista em entrada interativa.

  III.Projete e construa software para serem testados cedo
  idealmente em semanas. NÂO hesite em refatorar partes
  defeituosas.

  IV.Use ferramentas em vez de ajuda não qualificada para
  facilitar a tarefa de programação, mesmo que tenhas que
  desenvolvê-las a mão no processo.

Síntese posterior:
  Escreva programas que façam uma coisa e a façam bem.
  Escreva programas para trabalharem juntos.
  Escreva programas para lidar com fluxos de texto, porque essa é uma interface universal.

Ideias satélites:
  Regra da modularidade: escreva partes simples conectadas por interfaces limpas.
  Regra da clareza: clareza é melhor que inteligência.
  Regra da composição: projete programas para serem conectados a outros programas.
  Regra da separação: separe a política do mecanismo; separe as interfaces dos mecanismos.
  Regra da simplicidade: projete para simplicidade; adicione complexidade somente onde for necessário.
  Regra da parcimônia: escreva um programa grande somente quando estiver claro pela demonstração que nada mais servirá.
  Regra da transparência: projete para visibilidade para facilitar a inspeção e a depuração.
  Regra da robustez: robustez é filha da transparência e da simplicidade.
  Regra da representação: dobre o conhecimento em dados para que a lógica do programa possa ser estúpida e robusta.
  Regra da menor surpresa: no design de interface, sempre faça a coisa menos surpreendente.
  Regra do silêncio: quando um programa não tem nada de surpreendente a dizer, ele não deve dizer nada.
  Regra de Reparo: Quando você tiver que falhar, falhe ruidosamente e o mais rápido possível.
  Regra de Economia: O tempo do programador é caro; conserve-o em vez do tempo da máquina.
  Regra de Geração: Evite hacking manual; escreva programas para escrever programas quando puder.
  Regra de Otimização: Prototipar antes de polir. Faça funcionar antes de otimizar.
  Regra de Diversidade: Desconfie de todas as alegações de "um caminho verdadeiro".
  Regra de Extensibilidade: Projete para o futuro, porque ele chegará mais cedo do que você pensa.

https://cscie2x.dce.harvard.edu/hw/ch01s06.html

###########

PILARES PARADIGMÁTICOS DA ORIENTAÇÃO A OBJETOS

ABSTRAÇÃO
  Modelagem de relações, atributos e interações entre
  entidades como classes em um sistema.

ENCAPSULAMENTO
  Controle de acesso a detalhes internos da implementação
  da classe.
  Ocultação do estado interno da classe liberável apenas por
  métodos públicos.
  Atributos e Métodos. Comumente se manifesta
  em tres níveis:

  |-----------EXTERNO-HERDEIRAS-SELF/THIS
  PÚBLICO:    r-x     rwx       rwx
  PROTEGIDO:  ---     rwx       rwx
  PRIVADO:    ---     ---       rwx
  
  Evita Interferência externa

HERANÇA
   Reuso de código por meio da extensão de classe ou
   classe abstrata.
   Classe herdeira é um superconjunto com comportamentos
   iguais ou semelhantes à classe mãe e com atributos 
   da mãe mais outros se necessário.


POLIMORFISMO consequência da herança OU resultado da implementação de interfaces
  Sobrescrita de método para correção/adaptação de comportamento.
    Concordância com uma interface abstrata que determina
    entrada e saída. Comportamento varia, mas o resultado
    é aproximadamente o mesmo.
  Sobrecarga de operadores como funcionalidade
  abstracional da linguagem de acordo com o tipo abstrato
  criado pela classe EX: String a = "Hello"; a + " World";


###########

SOLID by Robert C. Martin (Uncle Bob)

Single Responsibility Principle
Open/Closed Principle
Liskov Substitution Principle
Interface Segregation Principle
Dependency Inversion Principle (MAIS IMPORTANTE)
  1.1 Por parâmetro de construtor via interface
    1.1.1 Não funciona como o esperado. Depende de
          Implementação concreta e não de abstração
          impossibilitando alteração para outra classe.
          Vide PADRÃO ADAPTADOR em 1.8
  1.2 -
  1.3 Interface: definição abstrata de como classe deve
      ser construida para ser compatível.
  1.4 Testes e facilitação de Mocks ( e dos próprios testes)
  1.5 Módulos de alto nível não devem depender de
      módulos de baixo nível, mas sim de abstrações
      contratuais.
  1.6 Abstrações não devem depender de detalhes de
      implementação.
  1.7 new dentro de construtor -> acomplamento concretado
    1.7.1 Teste de Integração
    1.7.2 Veneno de teste unitário
  1.8 Padrão de projeto Adaptador se beneficia muito
    1.8.1 DependênciaX ou DependênciaY, AdpatadorAbstrato, ClasseConsumidora
    1.8.2 X Dependências que atendem de formas levemente diferente a necessidade
          da classe consumidora.
  1.9 Dependências múdam e muitas vezes são externas.


###########

DOMAIN DRIVEN DESIGN (projeto dirigido a domínio) Eric Evans
Classes, Métodos e Atributos devem bater com o domínio de negócio.

Entender o domínio de negócios
  DOMÍNIO
    Área lógica que define o problema que queres resolver.
    Conhecida também como minimundo ou delimitação.
    Exemplos:
      Empreendimento:
        Varejo = (Inventário, Compras, Recursos Humanos, Financeiro)
        Educação = (Questionários, Pontuações, Usuários)
        Bancário = (Núcleo bancário, Núcleo produto, Risco, Tesouro, AntiFraude)
  ENTIDADE
    São objetos de domínio definidos por identificadores únicos
    e não por atributos.
    São o bloco de construção da modelagem de domínio e são o primeiro
    lugar onde devemos pensar em por a lógica de domínio.
    Alerta a requisitos que correspondem objetos por atributos.
    EXAMPLES:
      User, Costumer, Organization, Job, Message, Notification
  VALUE OBJECT
  Objeto imutável que tem atributos, entretanto não tem identidade distinta.
    Name, Address, JobTitle, MessageObject, NotificationReason
  UUID para identificação única universal
  AGREGADOS
  FÁBRICAS
  EVENTOS DE DOMÍNIO
  SERVIÇOS
  REPOSITÓRIOS
LINGUAGEM UBÍQUA
  O desenvolvedor e usuário deve falarem a "mesma linguagem", o desenvolvedor usa 
  esta linguagem para atingir a definição de nome de Clases seus Atributos e Métodos
  (Consumidor pode ser cliente, pode ser usuário)
BOUNDED CONTEXTS | CONTEXTOS LIMITADOS
  Limite lógico em torno do código que representa a solução para aquele domínio.
  Solução do problema descrito pelo domínio.
  Define-se em termos de: organização do time, base de código e banco de dados,
  padronizar processo desenvolvimento de acordo com contexto, estabelecimento
  de práticas sólidas de CI/CD e DEVOPS para manutenção da consistência.
DESIGN ESTRATÉGICO
LAYERED ARCHITECTURE
  DDD recomenda arquitetura em camadas com a ideia principal de manter o
  conhecimento de domínio focado e não espalhado através de diferentes
  componentes como User Interface, Base de Dados, Camada de Persistência.


###########

OBJECT CALISTHENICS by Jeff Bay

Ajudando a aproximar-se dos pilares OOP
e princípios SOLID.

1. UM NÍVEL DE IDENTAÇÃO POR MÉTODO
  1.1 Complexidade ciclomática (Thomas J. McCabe)
    1.1.1 Número de caminhos possíveis
  1.2 no máximo 3

2. não utilizar else
  2.1 Complexidade ciclomática

3. ENCAPSULE TODOS OS TIPOS PRIMITIVOS E STRINGS
  3.1 Primitivos não possuem comportamentos.
  3.2 Primitivos são a base da representação de dados.
  3.3 Toda informação da vida real possui especificidades.
    3.3.1 CPF, CNPJ, Email, Datas de nascimento, valores monetários e etc. possuem
          restrições de domínio e não tratadas por tipos primitivos.
  3.4 Diminui reutilização de código enquanto promove duplicação de código.
  3.5 Impossibilidade/dificuldade de escrita de testes unitários.
  3.6 Aumento do acoplamento
  3.7 Impossível utilizar modelagem tática do DDD (Value Objects)
  3.8 Primitivos ainda utilizáveis para informação de carga informacional/comportamental
      mínima em classes EX: booleano.

4. ENVOLVA COLEÇÕES EM CLASSES

5. USE APENAS UM PONTO POR LINHA

6. NÃO ABREVIE NOMES DE VARIÁVEIS E MÉTODOS (CLEAN CODE ALSO)

7. MANTER ENTIDADES PEQUENAS
  7.1 grandes entidades são possível indício de violação
      da Single Responsibility Principle (Solid)

8. NENHUMA CLASSE COM MAIS DE DUAS VARIÁVEIS DE INSTÂNCIA.

9. NÃO USAR GETTERS/SETTERS
  9.1 Getter e Setter fere Encapsulamento.
    9.1.1 Getter/Setter não é diferente de acesso público
          a atributo. Simples violação do encapsulamento.
  9.2 Separação de comportamento da classe.
  9.3 Domínio e classes anêmicas (DDD)
  9.4 Fere o princípio: Tell, Don't Ask
    9.4.1 Aumento de acomplamento quando o código cliente
          pergunta "Get()" a classe servente.
  9.5 Problema de Semântica - Linguagem Ubíqua (DDD)
  9.6 Objetos de estados inconsistentes
  9.7 Leitura por getter útil para leitura não relacionada
      à lógica de negócio.

###########

Tell, don't ask

Product()
x = new Product()
// código cliente -> acoplamento sendo aedificado !
x.get_price() //pergunta
//código desconto
Perceba indicativo de anemia na classe Product
----------------------
// client code
x.applyDiscount(...) //faça

Dai Product pode depender de classes com
regras de negócio para desconto ...
Vide inversão de dependência

###########

classe anêmica
Falta de comportamento restritivo à violação dos limites
impostos por regra de negócio obtida da realidade.

entidade não são tabelas no banco de dados
são os guardiões das regras de negócio.

método joga exception para fora
em caso de violação de regra de negócio.

